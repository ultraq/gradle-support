/**
 * Common Gradle build script to make use of JAXB's XJC tool and any XJC plugins
 * used throughout my projects.  Assumes the java plugin has already been
 * applied.
 * 
 * @author Emanuel Rabina
 */

configurations {
	xjc
}

dependencies {
	xjc(
		'com.sun.xml.bind:jaxb-impl:2.2.7',
		'com.sun.xml.bind:jaxb-xjc:2.2.7',

		// Use the XJC taks from the JAXB2 Commons project to allow plugin use
		'org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.3'
	)
}

/**
 * Get the latest modification time of the files in the file collection.
 * 
 * @param files
 */
def latestModificationTime(files) {

	def modificationTime = 0
	files.each { file ->
		if (modificationTime < file.lastModified()) {
			modificationTime = file.lastModified()
		}
	}
	return modificationTime
}

/**
 * Add the missing <tt>XmlRootElement</tt> annotation to a JAXB-generated class.
 * 
 * @param classfile
 * @param classname
 * @param elementname
 */
def addMissingRootElement(classfile, classname, elementname) {

	ant.replace(file: classfile) {
		replacetoken('import javax.xml.bind.annotation.XmlType;')
		replacevalue('import javax.xml.bind.annotation.XmlRootElement;\n' +
					 'import javax.xml.bind.annotation.XmlType;')
	}
	ant.replace(file: classfile) {
		replacetoken("public class ${classname} {")
		replacevalue("@XmlRootElement(name = \"${elementname}\")\n" +
					 "public class ${classname} {")
	}
}

/**
 * Task to create Java class files from XML schemas.
 */
task xjc(
	description: 'XML schema to Java compiler') {

	System.setProperty('javax.xml.accessExternalSchema', 'all')

	ext.schemaDir = 'schema'
	ext.outputDir = 'source'
	ext.schemas   = ['**/*.xsd']
	ext.bindings  = ['**/*.jxb']
	ext.classes   = []
	ext.args      = []

	onlyIf {
		def schemaModifiedTime = latestModificationTime(fileTree(dir: schemaDir, includes: schemas + bindings))
		def outputModifiedTime = latestModificationTime(fileTree(dir: outputDir, includes: classes))
		return schemaModifiedTime > outputModifiedTime
	}
	doLast {
		ant.taskdef(
			name: 'xjc',
			classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
			classpath: configurations.xjc.asPath)
		ant.xjc(
			destDir: outputDir,
			extension: 'true') {
			schema(dir: schemaDir, includes: schemas.join(' '))
			binding(dir: schemaDir, includes: bindings.join(' '))
			args.each { val ->
				arg(value: val)
			}
		}
	}
}

// Insert XJC into the task dependency graph
if (plugins.hasPlugin('java')) {
	xjc.dependsOn(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)
	compileJava.dependsOn(xjc)
}
