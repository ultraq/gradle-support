/**
 * Common Gradle script configuration for simple projects.  Made to be applied
 * _after_ all standard plugins.
 * 
 * @author Emanuel Rabina
 */

/* 
 * Introduce 'optional' and 'provided' configuration modifiers.
 */
project.ext.optionalDependencies = []
project.ext.optional = {
	optionalDependencies << it
}
project.ext.providedDependencies = []
project.ext.provided = {
	providedDependencies << it
}

/* 
 * Include Maven central and snapshot repositories by default.
 */
repositories {
	mavenCentral()
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
}

/* 
 * Adjust plugins, source and build directories, and any standard Gradle tasks
 * for the way I use them.
 */
def sourceDirectories = ['source']
def testDirectories   = ['test']

if (plugins.hasPlugin('java')) {
	sourceSets {
		main {
			java {
				srcDirs = sourceDirectories
			}
			resources {
				srcDirs = sourceDirectories
				exclude '**/*.java'
			}
		}
		test {
			java {
				srcDirs = testDirectories
			}
			resources {
				srcDirs = testDirectories
			}
		}
	}
	// Make IntelliJ use the same build directories as Gradle so that I'm not
	// having to ignore 2 sets of build outputs.
	if (plugins.hasPlugin('idea')) {
		idea {
			module {
				outputDir file('build/classes/java/main')
				testOutputDir file('build/classes/test')
			}
		}
	}
	jar {
		dependsOn test
		duplicatesStrategy 'exclude'
	}
}

if (plugins.hasPlugin('groovy')) {
	sourceSets {
		main {
			groovy {
				srcDirs = sourceDirectories
			}
			resources {
				exclude '**/*.groovy'
			}
		}
		test {
			groovy {
				srcDirs = testDirectories
			}
			resources {
				srcDirs = testDirectories
			}
		}
	}
	// Make IntelliJ use the same build directories as Gradle so that I'm not
	// having to ignore 2 sets of build outputs.
	if (plugins.hasPlugin('idea')) {
		idea {
			module {
				outputDir file('build/classes/groovy/main')
				testOutputDir file('build/classes/test')
			}
		}
	}
	groovydoc {
		link('http://docs.oracle.com/javase/8/docs/api/', 'java.', 'javax.', 'org.xml.')
		link('http://docs.groovy-lang.org/latest/html/gapi/', 'groovy.', 'org.codehaus.groovy.')
	}
}

/* 
 * Codenarc configuration to use my shared config.
 */
if (plugins.hasPlugin('codenarc')) {
	codenarc {
		def sharedConfig = 'https://raw.githubusercontent.com/ultraq/codenarc-config-ultraq/master/codenarc.groovy'.toURL().text
		config = resources.text.fromString(sharedConfig)
		toolVersion = '2.0.0'
	}
}

/* 
 * JaCoCo plugin for including XML output for coveralls.
 */
if (plugins.hasPlugin('jacoco')) {
	jacocoTestReport {
		reports {
			xml.required = true
			html.required = true
		}
	}
}

/* 
 * Bundle support via the new distribution plugin.
 */
if (plugins.hasPlugin('distribution')) {
	distributions {
		main {
			contents {
				from(jar.outputs.files)
				if (plugins.hasPlugin('groovy')) {
					from(groovydoc.destinationDir) {
						into 'groovydoc'
					}
				}
				else {
					from(javadoc.destinationDir) {
						into 'javadoc'
					}
				}
				from(configurations.runtimeClasspath) {
					into 'libraries'
				}
				from(sourceSets.main.java.srcDirs[0]) {
					into 'source'
				}
				from('.') {
					include 'CHANGELOG.md'
					include 'LICENSE.txt'
					include 'README.md'
				}
			}
		}
	}
	distZip {
		dependsOn plugins.hasPlugin('groovy') ? 'groovydoc' : 'javadoc'
		duplicatesStrategy = 'exclude'
	}
}
