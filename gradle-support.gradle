/*
 * Copyright 2012, Emanuel Rabina (http://www.ultraq.net.nz/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Common Gradle script configuration for simple projects.  Made to be applied
 * _after_ all standard plugins.
 *
 * @author Emanuel Rabina
 */

/*
 * Include Maven central and snapshot repositories by default.
 */
repositories {
	mavenCentral()
	maven {
		url = 'https://central.sonatype.com/repository/maven-snapshots/'
	}
}

/*
 * Adjust plugins, source and build directories, and any standard Gradle tasks
 * for the way I use them.
 */
def sourceDirectories = ['source']
def testDirectories = ['test']

if (plugins.hasPlugin('java')) {
	sourceSets {
		main {
			java {
				srcDirs = sourceDirectories
			}
			resources {
				srcDirs = sourceDirectories
				exclude '**/*.java'
			}
		}
		test {
			java {
				srcDirs = testDirectories
			}
			resources {
				srcDirs = testDirectories
			}
		}
	}

	// Make IntelliJ use the same build directories as Gradle so that I'm not
	// having to ignore 2 sets of build outputs.
	if (plugins.hasPlugin('idea')) {
		idea {
			module {
				outputDir = file('build/classes/java/main')
				testOutputDir = file('build/classes/test')
			}
		}
	}
}

if (plugins.hasPlugin('groovy')) {
	sourceSets {
		main {
			groovy {
				srcDirs = sourceDirectories
			}
			resources {
				exclude '**/*.groovy'
			}
		}
		test {
			groovy {
				srcDirs = testDirectories
			}
			resources {
				srcDirs = testDirectories
			}
		}
	}

	// Make IntelliJ use the same build directories as Gradle so that I'm not
	// having to ignore 2 sets of build outputs.
	if (plugins.hasPlugin('idea')) {
		idea {
			module {
				outputDir = file('build/classes/groovy/main')
				testOutputDir = file('build/classes/test')
			}
		}
	}

	processResources {
		filesMatching('**/org.codehaus.groovy.runtime.ExtensionModule') {
			expand([
				moduleVersion: version
			])
		}
	}

	// Fix for NoClassDefFoundError when running groovydoc via Gradle and using Groovy 4.0.2+
	dependencies {
		compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.26.4'
	}

	groovydoc {
		link('http://docs.oracle.com/javase/8/docs/api/', 'java.', 'javax.', 'org.xml.')
		link('http://docs.groovy-lang.org/latest/html/gapi/', 'groovy.', 'org.codehaus.groovy.')
	}

	// A task to collect the groovydoc files into a JAR, replacing the javadoc one
	task groovydocJar(type: Jar, dependsOn: groovydoc) {
		from groovydoc.destinationDir
		destinationDirectory = file('build/libs')
		archiveClassifier = 'javadoc'
	}
}

/*
 * Codenarc configuration to use my shared config.
 */
if (plugins.hasPlugin('codenarc')) {
	codenarc {
		def sharedConfig = 'https://raw.githubusercontent.com/ultraq/codenarc-config-ultraq/master/codenarc.groovy'.toURL().text
		config = resources.text.fromString(sharedConfig)
	}
}

/*
 * JaCoCo plugin for including XML output for code coverage.
 */
if (plugins.hasPlugin('jacoco')) {
	jacocoTestReport {
		reports {
			xml.required = true
			html.required = true
		}
	}
}

/*
 * Bundle support via the new distribution plugin.
 */
if (plugins.hasPlugin('distribution')) {
	distributions {
		main {
			contents {
				from(jar.outputs.files)
				if (plugins.hasPlugin('groovy')) {
					from(groovydoc.destinationDir) {
						into 'groovydoc'
					}
				}
				else {
					from(javadoc.destinationDir) {
						into 'javadoc'
					}
				}
				from(configurations.runtimeClasspath) {
					into 'libraries'
				}
				from(sourceSets.main.java.srcDirs[0]) {
					into 'source'
				}
				from(rootProject.projectDir) {
					include 'CHANGELOG.md'
					include 'LICENSE.txt'
					include 'README.md'
				}
			}
		}
	}

	// I never use the TAR files
	distTar {
		enabled = false
	}

	distZip {
		dependsOn plugins.hasPlugin('groovy') ? 'groovydoc' : 'javadoc'
		duplicatesStrategy = 'exclude'
	}
}
