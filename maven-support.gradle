/**
 * Common Gradle script configuration for projects that need to publish to
 * Maven repositories.  Used for the original maven plugin.
 * 
 * This script is deprecated in favour of the maven-publish-support.gradle
 * script, which is built for the newer maven-publish plugin.
 * 
 * @author Emanuel Rabina
 */

def isGroovyProject = plugins.hasPlugin('groovy')

apply plugin: 'signing'

project.ext.artifact = ''
project.ext.year = ''
project.ext.licenses = [
	[
		name: 'The Apache Software License, Version 2.0',
		url: 'http://www.apache.org/licenses/LICENSE-2.0.txt',
		distribution: 'repo'
	]
]
project.ext.developers = []
project.ext.contributors = []

/**
 * Generate the pom.xml file, modifying the dependencies to support the optional
 * and provided configurations.
 */
def generatePom = {
	return pom {
		project {
			artifactId    project.artifact
			packaging     'jar'
			name          project.name
			description   project.description
			url           "https://github.com/ultraq/${project.artifact}/"
			inceptionYear project.year
			if (project.licenses) {
				licenses {
					project.licenses.each { l ->
						license {
							name         l.name
							url          l.url
							distribution l.distribution
						}
					}
				}
			}
			scm {
				connection          "scm:git:git@github.com:ultraq/${project.artifact}.git"
				developerConnection "scm:git:git@github.com:ultraq/${project.artifact}.git"
				url                 "https://github.com/ultraq/${project.artifact}"
			}
			developers {
				developer {
					id    'ultraq'
					name  'Emanuel Rabina'
					email 'emanuelrabina@gmail.com'
					url   'http://www.ultraq.net.nz/'
					roles {
						role 'author'
						role 'developer'
					}
					timezone 'Pacific/Auckland'
				}
				if (project.developers) {
					project.developers.each { d ->
						developer {
							name d.name
							if (d.email) {
								email d.email
							}
							if (d.url) {
								url d.url
							}
							roles {
								d.roles.each { r ->
									role r
								}
							}
						}
					}
				}
			}
			if (project.contributors) {
				contributors {
					project.contributors.each { c ->
						contributor {
							name c.name
							if (c.email) {
								email c.email
							}
							roles {
								c.roles.each { r ->
									role r
								}
							}
							properties {
								contribution c.contribution
							}
						}
					}
				}
			}
		}
	}.whenConfigured { pom ->
		optionalDependencies.each { dep ->
			pom.dependencies.find { it.artifactId == dep.name }.optional = true
		}
		providedDependencies.each { dep ->
			pom.dependencies.find { it.artifactId == dep.name }.scope = 'provided'
		}
	}
}

/**
 * Write the pom files included in the JAR for distribution to a Maven
 * repository.
 */
task writePoms {
	ext.pomXml        = file("${project.mavenPomDir}/pom.xml")
	ext.pomProperties = file("${project.mavenPomDir}/pom.properties")
	inputs.file(project.buildFile)
	outputs.files(pomXml, pomProperties)
	doLast {
		generatePom().writeTo(pomXml)
		pomProperties.withWriter { out ->
			out.println "# Generated using Gradle"
			out.println "# ${new Date().format('EEE MMM dd HH:mm:ss zzz yyyy')}"
			out.println "groupId    = ${project.group}"
			out.println "artifactId = ${project.artifact}"
			out.println "version    = ${project.version}"
		}
	}
}

/**
 * Reconfigure the JAR task to include the pom files normally generated by
 * Maven.
 */
jar {
	dependsOn writePoms
	metaInf {
		from("${project.mavenPomDir}")
		into("maven/${project.group}/${project.artifact}")
		include('pom.*')
	}
}

/**
 * Create the source files archive.
 */
task sourcesJar(
	dependsOn: classes,
	type: Jar) {

	doFirst {
		baseName = "${project.artifact}"
	}
	classifier = 'sources'
	from sourceSets.main.allSource
}

/**
 * Create the javadoc archive.
 */
task javadocJar(
	dependsOn: isGroovyProject ? groovydoc : javadoc,
	type: Jar) {

	doFirst {
		baseName = "${project.artifact}"
	}
	classifier = 'javadoc'
	from (isGroovyProject ? groovydoc : javadoc).destinationDir
}

/**
 * Include source and javadoc jars as part of the release.
 */
artifacts {
	archives sourcesJar, javadocJar
}

/**
 * Sign all jars for Maven central.
 */
signing {
	sign configurations.archives
}

/**
 * Used for testing, upload everything to the local repository.
 */
install {
	doFirst {
		repositories.mavenDeployer.pom = generatePom()
	}
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'file:///' + System.properties['user.home'] + '/.m2/repository/')
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}

/**
 * Upload everything to Maven central.
 */
uploadArchives {
	ext.sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
	ext.sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ''

	doFirst {
		repositories.mavenDeployer.pom = generatePom()
	}
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}
